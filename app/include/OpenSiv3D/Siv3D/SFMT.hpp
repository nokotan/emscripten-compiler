//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2019 Ryo Suzuki
//	Copyright (c) 2016-2019 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include <cassert>
# include <cstring>
# include <array>
# include "Fwd.hpp"
# include "Number.hpp"
# include <ThirdParty/SFMT/SFMT.hpp>

namespace s3d
{
	/// <summary>
	/// SFMT 19937 / Pseudo random number generator
	/// Result: 64-bit value
	/// Period: 2^19937-1
	/// Size: 2,512 bytes
	/// </summary>
	class SFMT19937_64
	{
	private:

		sfmt::SFMT_T m_sfmt;

	public:

		/// <summary>
		/// 生成される整数値の型
		/// The integral type generated by the engine
		/// </summary>
		using result_type = uint64;

		/// <summary>
		/// 乱数エンジンを作成し、内部状態を非決定的な乱数で初期化します。
		/// Constructs the engine and initializes the state with non-deterministic random numbers
		/// </summary>
		SFMT19937_64();

		/// <summary>
		/// 乱数エンジンを作成し、内部状態を初期化します。
		/// Constructs the engine and initializes the state.
		/// </summary>
		/// <param name="seed">
		/// 内部状態の初期化に使われるシード値
		/// seed value to use in the initialization of the internal state
		/// </param>
		explicit SFMT19937_64(uint64 seed);

		/// <summary>
		/// 乱数エンジンを作成し、内部状態を初期化します。
		/// Constructs the engine and initializes the state.
		/// </summary>
		/// <param name="seed">
		/// 内部状態の初期化に使われるシード値
		/// seed values to use in the initialization of the internal state
		/// </param>
		explicit SFMT19937_64(const std::array<uint64, 16>& seeds);

		/// <summary>
		/// 新しいシード値で乱数エンジンの内部状態を再初期化します。
		/// Reinitializes the internal state of the random-number engine using a new seed value.
		/// </summary>
		/// <param name="seed">
		/// 内部状態の初期化に使われるシード値
		/// seed value to use in the initialization of the internal state
		/// </param>
		void seed(uint64 seed);

		/// <summary>
		/// 新しいシード値で乱数エンジンの内部状態を再初期化します。
		/// Reinitializes the internal state of the random-number engine using new seed values.
		/// </summary>
		/// <param name="seeds">
		/// 内部状態の初期化に使われるシード値
		/// seed values to use in the initialization of the internal state
		/// </param>
		void seed(const std::array<uint64, 16>& seeds);

		/// <summary>
		/// 生成される乱数の最小値を返します。
		/// Returns the minimum value potentially generated by the random-number engine
		/// </summary>
		/// <returns>
		/// 生成される乱数の最小値
		/// The minimum potentially generated value
		/// </returns>
		[[nodiscard]] static constexpr result_type min()
		{
			return Smallest<result_type>;
		}

		/// <summary>
		/// 生成される乱数の最大値を返します。
		/// Returns the maximum value potentially generated by the random-number engine.
		/// </summary>
		/// <returns>
		/// 生成される乱数の最大値
		/// The maximum potentially generated value
		/// </returns>
		[[nodiscard]] static constexpr result_type max()
		{
			return Largest<result_type>;
		}

		/// <summary>
		/// 乱数を生成します。
		/// Generates a pseudo-random value.
		/// </summary>
		/// <returns>
		/// 生成された乱数
		/// A generated pseudo-random value
		/// </returns>
		result_type operator()()
		{
			return sfmt::sfmt_genrand_uint64(&m_sfmt);
		}

		/// <summary>
		/// [0, 1) の範囲の乱数を生成します。
		/// Generates a pseudo-random value in [0, 1)
		/// </summary>
		/// <returns>
		/// 生成された乱数
		/// A generated pseudo-random value
		/// </returns>
		double generateReal()
		{
			return sfmt::sfmt_genrand_res53(&m_sfmt);
		}

		[[nodiscard]] sfmt::SFMT_T serialize() const noexcept
		{
			return m_sfmt;
		}

		void deserialize(const sfmt::SFMT_T& data) noexcept
		{
			m_sfmt = data;
		}
	};
}
